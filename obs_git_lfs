#!/usr/bin/perl -w
#
# Copyright (c) 2022 Adrian Schroeter, SUSE LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################
#
# OBS Git LFS provider
# 
# This service answers git LFS requests and let OBS deliver the files
# based on a static database.
#
# This is only supposed to be used for converted sources from classic
# OBS source repositories. This is not supposed to be used for sources
# which are supposed to be actively maintained in git directly.
#

BEGIN {
  my ($wd) = $0 =~ m-(.*)/- ;
  $wd ||= '.';
  unshift @INC,  "$wd";
}

use Data::Dumper;
use JSON::XS ();

use BSServer;
use BSDispatch;
use BSSQLite;

use strict;

my $port = 9999;
my $proto = 'http';

my $db_file = "/etc/obs-git-lfs.db";

sub getgitlfs {
  die("need batch data as content\n") unless BSServer::have_content();
  my $batch_json = BSServer::read_data(10000000);
  my $batch = JSON::XS::decode_json($batch_json);

  # print $batch_json;
  # print Dumper($batch);

  die("not a download operation\n") unless $batch->{'operation'} eq 'download';
  die("409 not using sha256 as hash algo\n") if defined($batch->{'hash_algo'}) && $batch->{'hash_algo'} ne 'sha256';

  my $h = BSSQLite::connectdb($db_file);
  my @resobj;
  for my $obj (@{$batch->{'objects'}}) {
    my $oid = $obj->{'oid'};
    my $size = $obj->{'size'};
    my $r = { oid => $oid, size => int($size) };
    my @ary = BSSQLite::selectrow($h, "SELECT project,package,filename,rev FROM lfs_oids WHERE sha256 = ? AND size = ?", lc($oid), $size);
    #  print Dumper(@ary);
    if (@ary != 4) {
      print "$oid/$size: not found\n";
      $r->{'error'} = { code => 404, message => 'Object does not exist' };
    } else {
      my ($projid, $packid, $filename, $md5) = @ary;
      my $url = BSHTTP::urlencode("https://api.opensuse.org/public/source/$projid/$packid/$filename")."?rev=$md5";
      print "$oid $size: $url\n";
      $r->{'authenticated'} = JSON::XS::true;
      $r->{'actions'} = { download => { href => $url } };
    }
    push @resobj, $r;
  }
  my $resp = {
    transfer => 'basic',
    hash_algo => 'sha256',
    objects => \@resobj,
  };
  #  print Dumper(JSON::XS::encode_json($resp));
  return (JSON::XS::encode_json($resp), 'Content-Type: application/json');
}

sub dummylock {
  die("404 read-only server\n");
}

sub hello {
  return ("{\"message\": \"OBS git LFS Server\"}\n", 'Content-Type: application/json');
}

sub errorreply {
  my ($err, $code, $tag, @hdrs) = @_;
  $err = JSON::XS::encode_json({'message' => $tag});
  BSServer::reply("$err\n", "Status: $code $tag", 'Content-Type: application/json', @hdrs);
}

# define server
my $dispatches = [
  '/' => \&hello,
  'POST:/gitlfs/objects/batch' => \&getgitlfs,
  'POST:/gitlfs/locks/verify' => \&dummylock,
];

my $conf = {
  'port' => $port,
  'proto' => $proto,
  'dispatch' => \&BSDispatch::dispatch,
  'dispatches' => $dispatches,
  'errorreply' => \&errorreply,
  'setkeepalive' => 1,
  'maxchild' => 20,
};

BSDispatch::compile($conf);
BSServer::serveropen($conf->{'port'});
BSServer::server($conf);
